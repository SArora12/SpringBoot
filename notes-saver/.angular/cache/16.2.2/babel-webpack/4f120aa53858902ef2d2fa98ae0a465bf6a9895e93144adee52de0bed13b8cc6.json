{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  get email() {\n    return this.Login.get('email');\n  }\n  get password() {\n    return this.Login.get('password');\n  }\n  constructor(product, username, router) {\n    this.product = product;\n    this.username = username;\n    this.router = router;\n    this.Login = new FormGroup({\n      email: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required)\n    });\n    this.error = false;\n  }\n  ngOnInit() {}\n  login() {\n    this.product.getlogin(this.Login.value.email).subscribe(res => {\n      this.r = res;\n      if (this.Login.value.email == \"abc\" && this.Login.value.password == \"Abcd@123\") {\n        this.router.navigate(['admin']);\n      }\n      if (res == null) {\n        this.error = true;\n      } else {\n        if (this.r.password == this.Login.value.password) {\n          localStorage.setItem(\"logged\", \"true\");\n          this.router.navigate(['home']);\n          this.username.setUsername(this.r.firstname);\n          this.username.setUseremail(this.r.email);\n          console.log(this.r.email);\n          console.log(this.r.firstname);\n        } else {\n          this.error = true;\n        }\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","LoginComponent","email","Login","get","password","constructor","product","username","router","required","error","ngOnInit","login","getlogin","value","subscribe","res","r","navigate","localStorage","setItem","setUsername","firstname","setUseremail","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\simranarora\\Desktop\\Desktop\\New folder\\mini_assignment\\notes-saver\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ProductService } from '../product.service';\nimport { Router } from '@angular/router';\nimport { UserService } from '../user.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  Login = new FormGroup({\n    email: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required)\n  })\n  error = false\n\n  get email() { return this.Login.get('email') }\n  get password() { return this.Login.get('password') }\n\n  constructor(private product: ProductService, private username:UserService,private router: Router) { }\n\n  ngOnInit(): void {\n  }\n  r: any\n\n  login() {\n\n    this.product.getlogin(this.Login.value.email).subscribe((res: any) => {\n      \n      this.r = res\n      if(this.Login.value.email==\"abc\" && this.Login.value.password==\"Abcd@123\")\n      {\n        this.router.navigate(['admin']);\n      }\n      if (res == null) {\n\n        this.error = true\n      }\n      else {\n\n        if (this.r.password == this.Login.value.password) {\n          localStorage.setItem(\"logged\", \"true\")\n\n          this.router.navigate(['home']);\n          this.username.setUsername(this.r.firstname);\n          this.username.setUseremail(this.r.email);\n          console.log(this.r.email);\n          console.log(this.r.firstname)\n        }\n        else {\n          this.error = true\n        }\n      }\n\n\n\n    })\n\n\n\n  }\n\n\n\n}\n\n\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAUnE,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAQzB,IAAIC,KAAKA,CAAA;IAAK,OAAO,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,OAAO,CAAC;EAAC;EAC7C,IAAIC,QAAQA,CAAA;IAAK,OAAO,IAAI,CAACF,KAAK,CAACC,GAAG,CAAC,UAAU,CAAC;EAAC;EAEnDE,YAAoBC,OAAuB,EAAUC,QAAoB,EAASC,MAAc;IAA5E,KAAAF,OAAO,GAAPA,OAAO;IAA0B,KAAAC,QAAQ,GAARA,QAAQ;IAAqB,KAAAC,MAAM,GAANA,MAAM;IATxF,KAAAN,KAAK,GAAG,IAAIJ,SAAS,CAAC;MACpBG,KAAK,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,QAAQ,CAAC;MAC/CL,QAAQ,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACU,QAAQ;KAClD,CAAC;IACF,KAAAC,KAAK,GAAG,KAAK;EAKuF;EAEpGC,QAAQA,CAAA,GACR;EAGAC,KAAKA,CAAA;IAEH,IAAI,CAACN,OAAO,CAACO,QAAQ,CAAC,IAAI,CAACX,KAAK,CAACY,KAAK,CAACb,KAAK,CAAC,CAACc,SAAS,CAAEC,GAAQ,IAAI;MAEnE,IAAI,CAACC,CAAC,GAAGD,GAAG;MACZ,IAAG,IAAI,CAACd,KAAK,CAACY,KAAK,CAACb,KAAK,IAAE,KAAK,IAAI,IAAI,CAACC,KAAK,CAACY,KAAK,CAACV,QAAQ,IAAE,UAAU,EACzE;QACE,IAAI,CAACI,MAAM,CAACU,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;;MAEjC,IAAIF,GAAG,IAAI,IAAI,EAAE;QAEf,IAAI,CAACN,KAAK,GAAG,IAAI;OAClB,MACI;QAEH,IAAI,IAAI,CAACO,CAAC,CAACb,QAAQ,IAAI,IAAI,CAACF,KAAK,CAACY,KAAK,CAACV,QAAQ,EAAE;UAChDe,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;UAEtC,IAAI,CAACZ,MAAM,CAACU,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;UAC9B,IAAI,CAACX,QAAQ,CAACc,WAAW,CAAC,IAAI,CAACJ,CAAC,CAACK,SAAS,CAAC;UAC3C,IAAI,CAACf,QAAQ,CAACgB,YAAY,CAAC,IAAI,CAACN,CAAC,CAAChB,KAAK,CAAC;UACxCuB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,CAAC,CAAChB,KAAK,CAAC;UACzBuB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,CAAC,CAACK,SAAS,CAAC;SAC9B,MACI;UACH,IAAI,CAACZ,KAAK,GAAG,IAAI;;;IAMvB,CAAC,CAAC;EAIJ;CAID;AAxDYV,cAAc,GAAA0B,UAAA,EAL1B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW7B,cAAc,CAwD1B;SAxDYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}